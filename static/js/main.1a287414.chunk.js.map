{"version":3,"sources":["serviceWorker.js","Components/Board/Square.js","Components/Board/Board.js","Components/Board/Game.js","index.js"],"names":["Boolean","window","location","hostname","match","Square","props","className","onClick","value","Board","i","this","squares","startingIndex","renderSquare","renderRow","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","lines","length","a","b","c","step","setState","slice","squaresTemp","calculateWinner","concat","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a287414.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nfunction Square(props){\r\n    return(\r\n        <button \r\n            className=\"square btn btn-primary col p-4 m-1\"\r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Square;","import React from 'react';\r\nimport Square from './Square';\r\n\r\nclass Board extends React.Component{\r\n\r\n    renderSquare(i){\r\n        return (\r\n            <Square \r\n                value={this.props.squares[i]}\r\n                onClick={()=> this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderRow(startingIndex){\r\n        return (\r\n            <div className=\"row\">\r\n                {this.renderSquare(startingIndex)}\r\n                {this.renderSquare(startingIndex+1)}\r\n                {this.renderSquare(startingIndex+2)}\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    render(){\r\n        \r\n        return(\r\n            <div className=\"board\">\r\n                {this.renderRow(0)}\r\n                {this.renderRow(3)}\r\n                {this.renderRow(6)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from './Board'; \r\n\r\nclass Game extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            history: [{\r\n                squares:Array(9).fill(null),\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n         }; \r\n    }\r\n    \r\n    calculateWinner(squares) {\r\n        const lines = [\r\n          [0, 1, 2],\r\n          [3, 4, 5],\r\n          [6, 7, 8],\r\n          [0, 3, 6],\r\n          [1, 4, 7],\r\n          [2, 5, 8],\r\n          [0, 4, 8],\r\n          [2, 4, 6],\r\n        ];\r\n        for (let i = 0; i < lines.length; i++) {\r\n          const [a, b, c] = lines[i];\r\n          if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n          }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    jumpTo(step){\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n    \r\n    handleClick(i){\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);    \r\n        const current = history[history.length - 1];\r\n        const squaresTemp = current.squares.slice();\r\n        if (this.calculateWinner(squaresTemp) || squaresTemp[i]) {\r\n            return;\r\n        } \r\n        squaresTemp[i] = this.state.xIsNext ? 'X' : 'O'\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares : squaresTemp,\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    render() { \r\n        const history = this.state.history;    \r\n        const current = history[this.state.stepNumber];\r\n        const winner = this.calculateWinner(current.squares);\r\n        \r\n        const moves = history.map((step, move) => {\r\n            const desc = move ? 'Go to move #' + move : 'Go to game start';\r\n            return (        \r\n                <li key={move}>\r\n                    <button className=\"btn btn-secondary mt-1\" onClick={() => this.jumpTo(move)}>{desc}</button>        \r\n                </li>      \r\n            );\r\n        });\r\n        let status;\r\n        if(winner){\r\n            status = 'Winner ' + winner;\r\n        }else{\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"status\">{status}</div>\r\n                <Board \r\n                    squares = {current.squares}\r\n                    onClick = {(i) => this.handleClick(i)}\r\n                />\r\n                <ol>\r\n                    {moves}\r\n                </ol>\r\n            </div>\r\n          );\r\n    }\r\n}\r\n \r\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Game from './Components/Board/Game';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}